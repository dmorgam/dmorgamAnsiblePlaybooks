---

# Master tasks, setup control planes

- name: Check if kubernetes master is already set-up.
  register: apiserver_status_code
  ansible.builtin.uri:
    url: https://127.0.0.1:6443/livez
    method: GET
    validate_certs: false
    status_code:
    - 200
    - -1

- name: Setup first master if livez prove timed out.
  become: true
  block:

    - name: Add control plane endpoint to /etc/hosts if not resolvable (first master ip by default).
      ansible.builtin.lineinfile:
        path: /etc/hosts
        state: present
        line: '{{ ansible_host }} {{ kubernetes_apiserver_ha_endpoint }}'
      when: kubernetes_apiserver_ha_endpoint is not ansible.utils.resolvable

    - name: Launch Kubeadm set-up (1/2).
      vars:
        kubernetes_advertise_address: "{{ ansible_host }}"
      register: kubeadm_result
      ansible.builtin.shell: |
        kubeadm init --pod-network-cidr {{ kubernetes_pods_cidr }} \
                     --service-cidr {{ kubernetes_service_cidr }}  \
                     --apiserver-advertise-address {{ kubernetes_advertise_address }} \
                     --apiserver-cert-extra-sans {{ kubernetes_apiserver_extra_sans }} \
                     --control-plane-endpoint {{ kubernetes_apiserver_ha_endpoint }} \
                     --upload-certs

    - name: Launch Kubeadm set-up (2/2).
      ansible.builtin.debug:
        msg: "{{ kubeadm_result.stdout_lines | join() }}"

    - name: Deploy flannel CNI (1/3).
      ansible.builtin.get_url:
        url: "{{ kubernetes_cni_yaml_url }}"
        dest: "/tmp/{{ kubernetes_cni_yaml }}"

    - name: Deploy flannel CNI (2/3).
      ansible.builtin.replace:
        path: "/tmp/{{ kubernetes_cni_yaml }}"
        regexp:  '^      "Network": "10.244.0.0/16",'
        replace: '      "Network": "{{ kubernetes_pods_cidr }}",'

    - name: Deploy flannel CNI (3/3).
      ansible.builtin.shell: |
        kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f /tmp/{{ kubernetes_cni_yaml }}

  when: apiserver_status_code.status == -1 and inventory_hostname == kubernetes_first_master

- name: Check if kubernetes master is already set-up.
  register: apiserver_status_code
  ansible.builtin.uri:
    url: https://127.0.0.1:6443/livez
    method: GET
    validate_certs: false
    status_code:
    - 200
    - -1

- name: Fetch first master tokens and CA.
  become: true
  block:

    - name: Fetch CA certificate hash (1/2).
      register: kubeadm_pki_ca
      community.crypto.x509_certificate_info:
        path: /etc/kubernetes/pki/ca.crt

    - name: Fetch CA certificate hash (1/2).
      ansible.builtin.set_fact:
        kubeadm_ca_cert_hash: 'sha256:{{ kubeadm_pki_ca["public_key_fingerprints"]["sha256"] | replace(":","") }}'

    - name: Fetch Joining Token (1/3).
      register: kubeadm_join_token
      ansible.builtin.shell: kubeadm token generate

    - name: Fetch Joining Token (2/3).
      ansible.builtin.shell: kubeadm token create {{ kubeadm_join_token.stdout_lines[0] }} --kubeconfig /etc/kubernetes/admin.conf

    - name: Fetch Joining Token (3/3).
      ansible.builtin.set_fact:
        kubeadm_joining_token: "{{ kubeadm_join_token.stdout_lines[0] }}"

    - name: Generate certificate key and upload certificates (1/3).
      register: certs_certificate_key
      ansible.builtin.shell: kubeadm certs certificate-key

    - name: Generate certificate key and upload certificates (2/3).
      ansible.builtin.set_fact:
        kubeadm_certificate_key: "{{ certs_certificate_key.stdout_lines[0] }}"

    - name: Generate certificate key and upload certificates (3/3).
      ansible.builtin.shell: kubeadm init phase upload-certs --upload-certs --certificate-key {{ kubeadm_certificate_key }}

  when: apiserver_status_code.status == 200 and inventory_hostname == kubernetes_first_master

- name: Join other master nodes to cluster.
  become: true
  block:

    - name: Add control plane endpoint to /etc/hosts if not resolvable (first master ip by default).
      ansible.builtin.lineinfile:
        path: /etc/hosts
        state: present
        line: "{{ hostvars[kubernetes_first_master]['ansible_host'] }} {{ kubernetes_apiserver_ha_endpoint }}"
      when: kubernetes_apiserver_ha_endpoint is not ansible.utils.resolvable

    - name: Launch kubeadm join controlplane (1/2). 
      register: kubeadm_join_result
      vars:
        kubeadm_joining_token: "{{ hostvars[kubernetes_first_master]['kubeadm_joining_token'] }}"
        kubeadm_ca_cert_hash: "{{ hostvars[kubernetes_first_master]['kubeadm_ca_cert_hash'] }}"
        kubernetes_advertise_address: "{{ ansible_host }}"
        kubeadm_certificate_key: "{{ hostvars[kubernetes_first_master]['kubeadm_certificate_key'] }}"
      ansible.builtin.shell: |
        kubeadm join {{ kubernetes_apiserver_ha_endpoint }}:6443 --token {{ kubeadm_joining_token }} \
                                                                 --apiserver-advertise-address {{ kubernetes_advertise_address }} \
                                                                 --discovery-token-ca-cert-hash {{ kubeadm_ca_cert_hash }} \
                                                                 --certificate-key {{ kubeadm_certificate_key }} \
                                                                 --control-plane

    - name: Launch kubeadm join controlplane (2/2). 
      ansible.builtin.debug:
        msg: "{{ kubeadm_join_result.stdout_lines | join() }}"

  when: apiserver_status_code.status == -1 and inventory_hostname != kubernetes_first_master

