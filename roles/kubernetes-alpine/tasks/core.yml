---

# Core tasks, getting node ready
- name: Core Tasks setup.
  become: true
  block:
  - name: Setting up required kernel modules.
    ansible.builtin.lineinfile:
      path: /etc/modules-load.d/k8s.conf
      state: present
      create: true
      line: '{{ item }}'
    with_items:
    - 'br_netfilter'
    - 'overlay'

  - name: Load required kernel modules.
    community.general.modprobe:
      name: '{{ item }}'
      state: present
    with_items:
    - 'br_netfilter'
    - 'overlay'

  - name: Setting up sysctl kernel configuration.
    ansible.builtin.lineinfile:
      path: /etc/sysctl.d/k8s.conf
      state: present
      create: true
      line: '{{ item }}'
    with_items:
    - 'net.bridge.bridge-nf-call-iptables = 1'
    - 'net.ipv4.ip_forward = 1'
    - 'net.bridge.bridge-nf-call-ip6tables = 1'

  - name: Disable swap (1/2).
    ansible.builtin.replace:
      path: /etc/fstab
      regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
      replace: '# \1\2\3swap\4'

  - name: Disable swap (2/2).
    ansible.builtin.shell: swapoff -a

  - name: Load sysctl configuration.
    ansible.builtin.shell: sysctl -p /etc/sysctl.d/k8s.conf

  - name: Get the repository release version of alpine.
    ansible.builtin.shell: "grep -E 'main$' -m 1 /etc/apk/repositories | rev | cut -d / -f2 | rev"
    register: alpine_repository_version

  - name: Adding community, edge-community and testing repositories.
    ansible.builtin.lineinfile:
      path: /etc/apk/repositories
      state: present
      line: '{{ item }}'
    with_items:
    - 'http://dl-cdn.alpinelinux.org/alpine/{{ alpine_repository_version.stdout_lines[0] }}/community'
    - 'http://dl-cdn.alpinelinux.org/alpine/edge/community'
    - 'http://dl-cdn.alpinelinux.org/alpine/edge/testing'

  - name: Install containerd and cni.
    community.general.apk:
      name:
      - cni-plugins
      - cni-plugin-flannel
      - flannel
      - flannel-contrib-cni
      - containerd
      - uuidgen
      - nfs-utils
      update_cache: true

  - name: Setup uid (1/2).
    register: alpine_machine_id
    ansible.builtin.stat:
      path: /etc/machine-id

  - name: Setup uid (2/2).
    ansible.builtin.shell: uuidgen > /etc/machine-id
    when: not alpine_machine_id.stat.exists

  - name: Starting containerd and adding to runlevel default.
    ansible.builtin.service:
      name: containerd
      state: started
      enabled: true
      runlevel: default

  - name: Install kubelet, kubeadm and kubectl.
    community.general.apk:
      name:
        - kubelet
        - kubectl
        - kubeadm
        - py3-cryptography
      update_cache: true

  - name: Pinning current kubernetes version installed (1/3).
    ansible.builtin.shell: "kubeadm version -o json"
    register: kubeadm_version

  - name: Pinning current kubernetes version installed (2/3).
    ansible.builtin.set_fact:
      kubernetes_version: "{{ kubeadm_version.stdout_lines | join() | from_json }}"

  - name: Pinning current kubernetes version installed (3/3).
    ansible.builtin.shell: "{{ item }}"
    with_items:
      - "apk add 'kubelet=~{{ kubernetes_version.clientVersion.major }}.{{ kubernetes_version.clientVersion.minor }}'"
      - "apk add 'kubeadm=~{{ kubernetes_version.clientVersion.major }}.{{ kubernetes_version.clientVersion.minor }}'"
      - "apk add 'kubectl=~{{ kubernetes_version.clientVersion.major }}.{{ kubernetes_version.clientVersion.minor }}'"

  - name: Starting kubelet and adding to runlevel default.
    ansible.builtin.service:
      name: kubelet
      state: started
      enabled: true
      runlevel: default

